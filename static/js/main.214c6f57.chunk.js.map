{"version":3,"sources":["logo.svg","utils/sort-string-array.ts","utils/keyboard-event-bus.ts","types.ts","utils/get-localized-key.ts","hooks/use-shortcut.ts","app.tsx","reportWebVitals.ts","index.tsx"],"names":["sortStringArray","arr","sort","a","b","localeCompare","KeyboardEventBus","_publishers","this","keys","sortedKeys","filter","pub","join","publishers","forEach","publisher","subscribers","subscriber","callback","name","target","isExist","Error","id","uuidv1","nameOrId","publisherNameOrId","map","includes","_sub","find","_pub","inst","Key","getLocalizedKey","keyboardEvent","keyboard","navigator","key","length","code","getLayoutMap","keyboardLayoutMap","localizedKey","get","useShortcut","activeKeysRef","useRef","useState","activeKeys","setActiveKeys","useEffect","matchesPublishers","instance","filterPublisherByKeys","fireAllCallbacks","resetKeys","current","addKey","onKeyDown","evt","window","event","onKeyUp","document","addEventListener","removeEventListener","App","onShortcutFired","toast","addPublisher","CMD_LEFT","SHIFT_LEFT","P_LOWERCASE","addSubscriber","removeAllSubscribers","removeAllPublishers","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.214c6f57.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const sortStringArray = (arr: string[] = []) => {\n  return arr.sort((a, b) => a.localeCompare(b));\n};\n\nexport default sortStringArray;\n","import { v1 as uuidv1 } from \"uuid\";\nimport { EBCallback, EBSub, EBTarget, IPublisher, Key } from \"../types\";\nimport sortStringArray from \"./sort-string-array\";\n\nclass KeyboardEventBus {\n  static inst?: KeyboardEventBus;\n  static get instance(): KeyboardEventBus {\n    if (KeyboardEventBus.inst) {\n      return KeyboardEventBus.inst;\n    }\n    KeyboardEventBus.inst = new KeyboardEventBus();\n    return KeyboardEventBus.inst;\n  }\n\n  private _publishers: IPublisher[] = [];\n\n  getAllPublishers(): IPublisher[] {\n    return this._publishers;\n  }\n\n  filterPublisherByKeys(keys: string[]): IPublisher[] {\n    const sortedKeys = sortStringArray(keys);\n    const publishers = this._publishers.filter((pub) => {\n      const sortedPubKeys = sortStringArray(pub.keys);\n      if (sortedPubKeys.join(\"\") === sortedKeys.join(\"\")) {\n        return true;\n      }\n      return false;\n    });\n    return publishers;\n  }\n\n  fireAllCallbacks(publishers: IPublisher[]) {\n    publishers?.forEach((publisher) => {\n      const subscribers = publisher.subscribers;\n      subscribers?.forEach((subscriber) => {\n        if (subscriber.callback) {\n          subscriber.callback();\n        }\n      });\n    });\n  }\n\n  addPublisher(name: string, keys: Key[], target?: EBTarget): IPublisher {\n    // Check if a publisher with same name is already exist\n    if (this.isExist(name)) {\n      throw new Error(\"Publisher is already existed.\");\n    }\n    // Generate unique id for publisher\n    const id = uuidv1();\n    const publisher: IPublisher = {\n      target,\n      id,\n      name,\n      keys,\n      subscribers: [],\n    };\n    this._publishers = [...this._publishers, publisher];\n    return publisher;\n  }\n\n  removePublisher(nameOrId: string): void {\n    this._publishers = this._publishers.filter(\n      (publisher) => publisher.id !== nameOrId && publisher.name !== nameOrId\n    );\n  }\n\n  removeAllPublishers(): void {\n    this._publishers = [];\n  }\n\n  addSubscriber(\n    name: string,\n    publisherNameOrId: string,\n    callback: EBCallback,\n    target?: EBTarget\n  ): EBSub {\n    // Check if publisher exist\n    if (!this.isExist(publisherNameOrId)) {\n      throw new Error(\"Publisher does not exist.\");\n    }\n\n    // Generate unique ID for subscriber\n    const id = uuidv1();\n    const subscriber: EBSub = {\n      id,\n      name,\n      target,\n      callback,\n    };\n\n    this._publishers = this._publishers?.map((publisher) => {\n      if ([publisher.id, publisher.name].includes(publisherNameOrId)) {\n        return {\n          ...publisher,\n          subscribers: [...(publisher.subscribers || []), subscriber],\n        };\n      }\n      return publisher;\n    });\n\n    return subscriber;\n  }\n\n  removeSubscriber(publisherNameOrId: string, nameOrId: string): void {\n    this._publishers = this._publishers?.map((publisher) => {\n      if ([publisher.id, publisher.name].includes(publisherNameOrId)) {\n        return {\n          ...publisher,\n          subscribers: publisher.subscribers?.filter(\n            (_sub) => _sub.id !== nameOrId && _sub.name !== nameOrId\n          ),\n        };\n      }\n      return publisher;\n    });\n  }\n\n  removeAllSubscribers(publisherNameOrId: string): void {\n    this._publishers = this._publishers?.map((publisher) => {\n      if ([publisher.id, publisher.name].includes(publisherNameOrId)) {\n        return {\n          ...publisher,\n          subscribers: [],\n        };\n      }\n      return publisher;\n    });\n  }\n\n  isExist(publisherNameOrId: string): boolean {\n    const publisher = this._publishers.find((_pub) =>\n      [_pub.name, _pub.id].includes(publisherNameOrId)\n    );\n    if (publisher) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default KeyboardEventBus;\n","export enum Key {\n  SHIFT_LEFT = \"ShiftLeft\",\n  SHIFT_RIGHT = \"ShiftRight\",\n  TAB = \"Tab\",\n  CTRL_LEFT = \"ControlLeft\",\n  CTRL_RIGHT = \"ControlRight\",\n  ALT_LEFT = \"AltLeft\",\n  ALT_RIGHT = \"AltRight\",\n  CMD_LEFT = \"MetaLeft\",\n  CMD_RIGHT = \"MetaRight\",\n  BACKSPACE = \"Backspace\",\n  ENTER = \"Enter\",\n  CAPSLOCK = \"CapsLock\",\n  A_UPPERCASE = \"A\",\n  B_UPPERCASE = \"B\",\n  C_UPPERCASE = \"C\",\n  D_UPPERCASE = \"D\",\n  E_UPPERCASE = \"E\",\n  F_UPPERCASE = \"F\",\n  G_UPPERCASE = \"G\",\n  H_UPPERCASE = \"H\",\n  I_UPPERCASE = \"I\",\n  J_UPPERCASE = \"J\",\n  K_UPPERCASE = \"K\",\n  L_UPPERCASE = \"L\",\n  M_UPPERCASE = \"M\",\n  N_UPPERCASE = \"N\",\n  O_UPPERCASE = \"O\",\n  P_UPPERCASE = \"P\",\n  Q_UPPERCASE = \"Q\",\n  R_UPPERCASE = \"R\",\n  S_UPPERCASE = \"S\",\n  T_UPPERCASE = \"T\",\n  U_UPPERCASE = \"U\",\n  V_UPPERCASE = \"V\",\n  W_UPPERCASE = \"W\",\n  X_UPPERCASE = \"X\",\n  Y_UPPERCASE = \"Y\",\n  Z_UPPERCASE = \"Z\",\n  A_LOWERCASE = \"a\",\n  B_LOWERCASE = \"b\",\n  C_LOWERCASE = \"c\",\n  D_LOWERCASE = \"d\",\n  E_LOWERCASE = \"e\",\n  F_LOWERCASE = \"f\",\n  G_LOWERCASE = \"g\",\n  H_LOWERCASE = \"h\",\n  I_LOWERCASE = \"i\",\n  J_LOWERCASE = \"j\",\n  K_LOWERCASE = \"k\",\n  L_LOWERCASE = \"l\",\n  M_LOWERCASE = \"m\",\n  N_LOWERCASE = \"n\",\n  O_LOWERCASE = \"o\",\n  P_LOWERCASE = \"p\",\n  Q_LOWERCASE = \"q\",\n  R_LOWERCASE = \"r\",\n  S_LOWERCASE = \"s\",\n  T_LOWERCASE = \"t\",\n  U_LOWERCASE = \"u\",\n  V_LOWERCASE = \"v\",\n  W_LOWERCASE = \"w\",\n  X_LOWERCASE = \"x\",\n  Y_LOWERCASE = \"y\",\n  Z_LOWERCASE = \"z\",\n  NUM_0 = \"0\",\n  NUM_1 = \"1\",\n  NUM_2 = \"2\",\n  NUM_3 = \"3\",\n  NUM_4 = \"4\",\n  NUM_5 = \"5\",\n  NUM_6 = \"6\",\n  NUM_7 = \"7\",\n  NUM_8 = \"8\",\n  NUM_9 = \"9\",\n  BACKQUOTE = \"`\",\n}\n\nexport type EBCallback = (...args: any[]) => any;\n\nexport type EBTarget = HTMLElement | React.Component;\n\nexport interface EBSub {\n  name: string;\n  id: string;\n  target?: EBTarget;\n  callback: EBCallback;\n}\n\nexport interface IPublisher {\n  target?: EBTarget;\n  id: string;\n  name: string;\n  keys: Key[];\n  subscribers?: EBSub[];\n}\n","const getLocalizedKey = async (\n  keyboardEvent: KeyboardEvent\n): Promise<string> => {\n  const keyboard = (navigator as any).keyboard;\n\n  /*\n   * Return key code if the pressed key is not a single character key\n   * e.g SHIFT, CMD, CTRL\n   */\n  if (keyboardEvent.key.length > 1 && keyboardEvent.key !== \"Dead\") {\n    return keyboardEvent.code;\n  }\n  if (!keyboard) {\n    return keyboardEvent.key;\n  }\n\n  // Get localized key based on keyboard layout map\n  const keyboardLayoutMap = await keyboard.getLayoutMap();\n  const localizedKey: string = keyboardLayoutMap.get(keyboardEvent.code);\n\n  return localizedKey;\n};\n\nexport default getLocalizedKey;\n","import { useEffect, useRef, useState } from \"react\";\nimport KeyboardEventBus from \"../utils/keyboard-event-bus\";\nimport getLocalizedKey from \"../utils/get-localized-key\";\n\nconst useShortcut = () => {\n  const activeKeysRef = useRef<string[]>([]);\n  const [activeKeys, setActiveKeys] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!activeKeys.length) {\n      return;\n    }\n    const matchesPublishers =\n      KeyboardEventBus.instance.filterPublisherByKeys(activeKeys);\n    if (!!matchesPublishers.length) {\n      KeyboardEventBus.instance.fireAllCallbacks(matchesPublishers);\n    }\n  }, [activeKeys]);\n\n  const resetKeys = () => {\n    activeKeysRef.current = [];\n    setActiveKeys(activeKeysRef.current);\n  };\n\n  const addKey = (key: string) => {\n    if (activeKeysRef.current.includes(key)) {\n      return;\n    }\n    activeKeysRef.current = [...activeKeysRef.current, key];\n    setActiveKeys(activeKeysRef.current);\n  };\n\n  useEffect(() => {\n    const onKeyDown = async (evt: KeyboardEvent) => {\n      evt = evt || window.event;\n      const key = await getLocalizedKey(evt);\n      addKey(key);\n    };\n    const onKeyUp = async (evt: KeyboardEvent) => {\n      resetKeys();\n    };\n    document.addEventListener(\"keydown\", onKeyDown);\n    document.addEventListener(\"keyup\", onKeyUp);\n\n    // Detect window blur event and reset all\n    window.addEventListener(\"blur\", resetKeys);\n\n    return () => {\n      document.removeEventListener(\"keydown\", onKeyDown);\n      document.removeEventListener(\"keyup\", onKeyUp);\n      window.removeEventListener(\"blur\", resetKeys);\n    };\n  }, []);\n\n  return [activeKeys];\n};\n\nexport default useShortcut;\n","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./app.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport useShortcut from \"./hooks/use-shortcut\";\nimport KeyboardEventBus from \"./utils/keyboard-event-bus\";\nimport { Key } from \"./types\";\n\nfunction App() {\n  const onShortcutFired = () => toast(\"Congrats! You just hit a shortcut.\");\n\n  useEffect(() => {\n    // Add a publisher\n    const publisher = KeyboardEventBus.instance.addPublisher(\n      \"CMD_LEFT+SHIFT_LEFT+P\",\n      [Key.CMD_LEFT, Key.SHIFT_LEFT, Key.P_LOWERCASE]\n    );\n\n    // Add a subscriber\n    KeyboardEventBus.instance.addSubscriber(\n      \"SUB_1\",\n      publisher.id,\n      onShortcutFired\n    );\n\n    return () => {\n      KeyboardEventBus.instance.removeAllSubscribers(publisher.id);\n      KeyboardEventBus.instance.removeAllPublishers();\n    };\n  }, []);\n\n  const [activeKeys] = useShortcut();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {!activeKeys.length && <p>Press left Command + left Shift + P</p>}\n        {!!activeKeys.length && <p>{activeKeys.join(\" + \")}</p>}\n      </header>\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}